--- # deployment microservice
apiVersion : apps/v1
kind: Deployment
metadata:
  name: -=APP_NAME=-
  namespace: -=ENV_NAMESPACE=-
spec:
  replicas: -=REPLICAS=-
  selector:
    matchLabels:
      app: -=APP_NAME=-
  strategy:
    type: RollingUpdate
    rollingUpdate:
       maxUnavailable: -=MAX_AVAIL=-
       maxSurge: -=MAX_SURGE=-
  template:
    metadata:
      labels:
        app: -=APP_NAME=-
    spec:
      containers:
        - name: -=APP_NAME=-
          image: -=CONTAINER_URL=-/idevops-=APP_NAME=-:-=TAG=-
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              path: /api/v1/-=APP_NAME=-/customer_intake_form/
              port: 80
              httpHeaders:
                - name: Authorization
                  value: -=API_AUTH_BASIC_TOKEN=-
            initialDelaySeconds: -=INITIAL_DELAY=-
            failureThreshold: -=FAILURE_THRESHOLD=-
            successThreshold: -=SUCCESS_THRESHOLD=-
            periodSeconds: -=PERIOD_SECONDS=-
          volumeMounts:
          - name: -=APP_NAME=--config-map-volume
            mountPath: /replace_files/
          env:
            - name: MYSQL_NAME
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MYSQL_NAME
            - name: MYSQL_URL
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MYSQL_URL
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MYSQL_PASSWORD
            - name: MICROSOFT_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MICROSOFT_CLIENT_ID
            - name: MICROSOFT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MICROSOFT_SECRET_KEY
            - name: NGINX_CONFIG_FILE_LOCATION
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: NGINX_CONFIG_FILE_LOCATION
            - name: SWAGGER_INDEX_LOCATION
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: SWAGGER_INDEX_LOCATION
            - name: BACKENDS_FILE_LOCATION
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: BACKENDS_FILE_LOCATION
            - name: APP_TYPE
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: DJANGO_APP_TYPE
            - name: LOG_LEVEL
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: LOG_LEVEL
            - name: RABBITMQ_EXCHANGE_TYPE
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: RABBITMQ_EXCHANGE_TYPE
            - name: RABBITMQ_EXCHANGE
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: RABBITMQ_EXCHANGE
            - name: RABBITMQ_HOST
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: RABBITMQ_HOST
            - name: RABBITMQ_PORT
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: RABBITMQ_PORT
            - name: APP_PORT
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: APP_PORT
            - name: APP_NAME
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: APP_NAME
            - name: DJANGO_LOG_LEVEL
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: DJANGO_LOG_LEVEL
            - name: NOTIFICATIONSERVICE_EXCHANGE
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: NOTIFICATIONSERVICE_EXCHANGE
            - name: GOOGLE_OAUTH_KEY
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: GOOGLE_OAUTH_KEY
            - name: GOOGLE_OAUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: GOOGLE_OAUTH_SECRET      
          ports:
            - name: httpapi
              containerPort: -=APP_PORT=-
            - name: http
              containerPort: 80
          resources:
            requests:
              memory: -=REQUEST_MEMORY=-
              cpu: -=REQUEST_CPU=-
      restartPolicy: Always
      volumes:
        - name: -=APP_NAME=--config-map-volume
          configMap:
            name: -=APP_NAME=--config-map

--- # deployment Consumer
apiVersion : apps/v1
kind: Deployment
metadata:
  name: -=APP_NAME=--consumer
  namespace: -=ENV_NAMESPACE=-
spec:
  replicas: 1
  selector:
    matchLabels:
      app: -=APP_NAME=--consumer
  template:
    metadata:
      labels:
        app: -=APP_NAME=--consumer
    spec:
      containers:
        - name: -=APP_NAME=--consumer
          image: -=CONTAINER_URL=-/idevops-=APP_NAME=-:-=TAG=-
          imagePullPolicy: Always
          volumeMounts:
          - name: -=APP_NAME=--config-map-volume
            mountPath: /replace_files/
          readinessProbe:
            exec:
              command:
                - "/rabbitmq_check"
            initialDelaySeconds: -=INITIAL_DELAY=-
            failureThreshold: -=FAILURE_THRESHOLD=-
            successThreshold: -=SUCCESS_THRESHOLD=-
            periodSeconds: -=PERIOD_SECONDS=-
          env:
            - name: MYSQL_NAME
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MYSQL_NAME
            - name: MYSQL_URL
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MYSQL_URL
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MYSQL_PASSWORD
            - name: MICROSOFT_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MICROSOFT_CLIENT_ID
            - name: MICROSOFT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: MICROSOFT_SECRET_KEY
            - name: NGINX_CONFIG_FILE_LOCATION
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: NGINX_CONFIG_FILE_LOCATION
            - name: SWAGGER_INDEX_LOCATION
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: SWAGGER_INDEX_LOCATION
            - name: BACKENDS_FILE_LOCATION
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: BACKENDS_FILE_LOCATION
            - name: APP_TYPE
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: CONSUMER_APP_TYPE
            - name: LOG_LEVEL
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: LOG_LEVEL
            - name: RABBITMQ_EXCHANGE_TYPE
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: RABBITMQ_EXCHANGE_TYPE
            - name: RABBITMQ_EXCHANGE
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: RABBITMQ_EXCHANGE
            - name: RABBITMQ_PORT
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: RABBITMQ_PORT
            - name: RABBITMQ_HOST
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: RABBITMQ_HOST
            - name: APP_PORT
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: APP_PORT
            - name: APP_NAME
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: APP_NAME
            - name: NOTIFICATIONSERVICE_EXCHANGE
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: NOTIFICATIONSERVICE_EXCHANGE
            - name: DJANGO_LOG_LEVEL
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: DJANGO_LOG_LEVEL
            - name: GOOGLE_OAUTH_KEY
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: GOOGLE_OAUTH_KEY
            - name: GOOGLE_OAUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: -=APP_NAME=--secret
                  key: GOOGLE_OAUTH_SECRET
          resources:
            requests:
              memory: -=REQUEST_MEMORY=-
              cpu: -=REQUEST_CPU=-
      restartPolicy: Always
      volumes:
        - name: -=APP_NAME=--config-map-volume
          configMap:
            name: -=APP_NAME=--config-map

--- #config map - replace files
apiVersion: v1
kind: ConfigMap
metadata:
  name: -=APP_NAME=--config-map
  namespace: -=ENV_NAMESPACE=-
data:
  backends.py: |
    import logging

    from django.contrib.auth import get_user_model
    from django.contrib.auth.backends import ModelBackend

    from .client import MicrosoftClient
    from .conf import LOGIN_TYPE_XBL
    from .models import MicrosoftAccount, XboxLiveAccount
    from .utils import get_hook

    logger = logging.getLogger("django")
    User = get_user_model()


    class MicrosoftAuthenticationBackend(ModelBackend):
        """ Authentication backend to authenticate a user against their Microsoft
            Uses Microsoft's Graph OAuth and XBL servers to authentiate. """

        config = None
        microsoft = None

        def __init__(self, user=None):
            from .conf import config

            self.config = config

        def authenticate(self, request, code=None):
            """
                Authenticates the user against the Django backend
                    using a Microsoft auth code from
                https://login.microsoftonline.com/common/oauth2/v2.0/authorize or
                https://login.live.com/oauth20_authorize.srf

                For more details:
                https://developer.microsoft.com/en-us/graph/docs/get-started/rest
            """

            self.microsoft = MicrosoftClient(request=request)

            user = None
            if code is not None:
                # fetch OAuth token
                token = self.microsoft.fetch_token(code=code)

                # validate permission scopes
                if "access_token" in token and self.microsoft.valid_scopes(
                    token["scope"]
                ):
                    user = self._authenticate_user()

            if user is not None:
                self._call_hook(user)

            return user

        def _authenticate_user(self):
            if self.config.MICROSOFT_AUTH_LOGIN_TYPE == LOGIN_TYPE_XBL:
                return self._authenticate_xbox_user()
            else:
                return self._authenticate_microsoft_user()

        def _authenticate_xbox_user(self):
            xbox_token = self.microsoft.fetch_xbox_token()

            if "Token" in xbox_token:
                response = self.microsoft.get_xbox_profile()
                return self._get_user_from_xbox(response)
            return None

        def _authenticate_microsoft_user(self):
            claims = self.microsoft.get_claims()

            if claims is not None:
                return self._get_user_from_microsoft(claims)

            return None

        def _get_user_from_xbox(self, data):
            """ Retrieves existing Django user or creates
                a new one from Xbox Live profile data """
            user = None
            xbox_user = self._get_xbox_user(data)

            if xbox_user is not None:
                self._verify_xbox_user(xbox_user)

                user = xbox_user.user

                if (
                    self.config.MICROSOFT_AUTH_XBL_SYNC_USERNAME
                    and user.username != xbox_user.gamertag
                ):
                    user.username = xbox_user.gamertag
                    user.save()

            return user

        def _get_xbox_user(self, data):
            xbox_user = None

            try:
                xbox_user = XboxLiveAccount.objects.get(xbox_id=data["xid"])
                # update Gamertag since they can change over time
                if xbox_user.gamertag != data["gtg"]:
                    xbox_user.gamertag = data["gtg"]
                    xbox_user.save()
            except XboxLiveAccount.DoesNotExist:
                if self.config.MICROSOFT_AUTH_AUTO_CREATE:
                    # create new Xbox Live Account
                    xbox_user = XboxLiveAccount(
                        xbox_id=data["xid"], gamertag=data["gtg"]
                    )
                    xbox_user.save()

            return xbox_user

        def _verify_xbox_user(self, xbox_user):
            if xbox_user.user is None:
                user = User(username=xbox_user.gamertag)
                user.save()

                xbox_user.user = user
                xbox_user.save()

        def _get_user_from_microsoft(self, data):
            """ Retrieves existing Django user or creates
                a new one from Xbox Live profile data """
            user = None
            microsoft_user = self._get_microsoft_user(data)

            if microsoft_user is not None:
                user = self._verify_microsoft_user(microsoft_user, data)

            return user

        def _get_microsoft_user(self, data):
            microsoft_user = None

            try:
                microsoft_user = MicrosoftAccount.objects.get(
                    microsoft_id=data["sub"]
                )
            except MicrosoftAccount.DoesNotExist:
                if self.config.MICROSOFT_AUTH_AUTO_CREATE:
                    # create new Microsoft Account
                    microsoft_user = MicrosoftAccount(microsoft_id=data["sub"])
                    microsoft_user.save()

            return microsoft_user

        def _verify_microsoft_user(self, microsoft_user, data):
            user = microsoft_user.user

            if user is None:
                fullname = data.get("name")
                first_name, last_name = "", ""
                if fullname is not None:
                    first_name, last_name = data["name"].split(" ", 1)

                try:
                    # create new Django user from provided data
                    username = data["preferred_username"]
                    user = User.objects.get(username=username)

                    if user.first_name == "" and user.last_name == "":
                        user.first_name = first_name
                        user.last_name = last_name
                        user.save()
                except User.DoesNotExist:
                    user = User(
                        username=data["preferred_username"],
                        first_name=first_name,
                        last_name=last_name,
                        email=data["preferred_username"],
                    )
                    user.save()

                existing_account = self._get_existing_microsoft_account(user)
                if existing_account is not None:
                    if self.config.MICROSOFT_AUTH_AUTO_REPLACE_ACCOUNTS:
                        existing_account.user = None
                        existing_account.save()
                    else:
                        logger.warning(
                            (
                                "User {} already has linked Microsoft "
                                "account and MICROSOFT_AUTH_AUTO_REPLACE_ACCOUNTS "
                                "is False"
                            ).format(user.email)
                        )
                        return None

                microsoft_user.user = user
                microsoft_user.save()

            return user

        def _get_existing_microsoft_account(self, user):
            try:
                return MicrosoftAccount.objects.get(user=user)
            except MicrosoftAccount.DoesNotExist:
                return None

        def _call_hook(self, user):
            function = get_hook("MICROSOFT_AUTH_AUTHENTICATE_HOOK")
            if function is not None:
                if self.config.MICROSOFT_AUTH_LOGIN_TYPE == LOGIN_TYPE_XBL:
                    function(user, self.microsoft.xbox_token)
                else:
                    function(user, self.microsoft.token)


  index.html: |
    {% load i18n %}
    {% load static %}
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <title>Swagger UI</title>
      <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,700|Source+Code+Pro:300,600|Titillium+Web:400,600,700" rel="stylesheet">
      <link href="{% static 'rest_framework_swagger/bundles/vendors.bundle.css' %}" rel="stylesheet" type="text/css">
      <link href="{% static 'rest_framework_swagger/bundles/app.bundle.css' %}" rel="stylesheet" type="text/css">
      {% block extra_styles %}
      {# -- Add any additional CSS scripts here -- #}
      {% endblock %}
    </head>

    <body>
      <div class="swagger-ui">
        <div class="topbar">
          <div class="wrapper">
            <div class="topbar-wrapper">
              <a href="#" class="link">
                <img src="{% static 'rest_framework_swagger/logo_small.png' %}" alt="Swagger Logo">
                <span>swagger</span>
              </a>
              <div class="download-url-wrapper">
              {% if USE_SESSION_AUTH %}
                {% if request.user.is_authenticated %}
                <a class="download-url-button button" href="{{ LOGOUT_URL }}?next={{ request.path }}">{% trans "Logout" %}</a>
                {% else %}
                <a class="download-url-button button" href="{{ LOGIN_URL }}?next={{ request.path }}">{% trans "Session Login" %}</a>
                {% endif %}
              {% endif %}
              </div>
            </div>
          </div>
        </div>
        {% if USE_SESSION_AUTH %}
        <div class="user-context wrapper">
          {% block user_context_message %}
            {% if request.user.is_authenticated %}
              {% trans "You are logged in as: " %}<strong>{{ request.user }}</strong>
            {% else %}
               {% trans "Viewing as an anoymous user" %}
           {% endif %}
          {% endblock %}
        </div>
        {% endif %}
      </div>

      <div id="rest-swagger-ui"></div>
      {% csrf_token %}

      <footer class="swagger-ui">
        <div class="wrapper">
          {% trans "Powered by "%}<a href="https://github.com/marcgibbons/django-rest-swagger" target="_new">Django REST Swagger</a>
        </div>
      </footer>

      <script>
        window.drsSettings = {{ drs_settings|safe }};
        window.drsSpec = {{ spec|safe }};
      </script>
      <script src="{% static 'rest_framework_swagger/bundles/vendors.bundle.js' %}"></script>
      <script src="{% static 'rest_framework_swagger/bundles/app.bundle.js' %}"></script>
      {% block extra_scripts %}
      {# -- Add any additional scripts here -- #}
      {% endblock %}
    </body>

    </html>

  nginx.conf: |
    worker_processes 5;
    user root;
    error_log /dev/stdout info;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        accept_mutex off;
    }

    http {

        include mime.types;
        default_type application/octet-stream;
        access_log /dev/stdout combined;
        sendfile on;

        upstream app_server {
            server 127.0.0.1:-=APP_PORT=- fail_timeout=0;
        }

        server {
            listen 80;
            client_max_body_size 4G;
            server_name -=APP_NAME=-.-=ENV_NAMESPACE=- 127.0.0.1;
            keepalive_timeout 5;
            root /usr/src/app/idevops/static/;

            location / {
                try_files $uri @proxy_to_app;
            }

            location /static {
                autoindex on;
                alias /usr/src/app/idevops/static/;
            }

            location @proxy_to_app {
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;
                proxy_redirect off;
                proxy_pass http://127.0.0.1:-=APP_PORT=-;
            }

            error_page 500 502 503 504 /500.html;
            location = /500.html {
                root /usr/src/app/static/;
            }

        }

    }

--- # secret variables
apiVersion: v1
kind: Secret
metadata:
  name: -=APP_NAME=--secret
  namespace: -=ENV_NAMESPACE=-
type: Opaque
stringData:
  MICROSOFT_CLIENT_ID: '-=MICROSOFT_CLIENT_ID=-'
  MICROSOFT_SECRET_KEY: '-=MICROSOFT_SECRET_KEY=-'
  OAUTHLIB_RELAX_TOKEN_SCOPE: '-=OAUTHLIB_RELAX_TOKEN_SCOPE=-'
  LOG_LEVEL: '-=LOG_LEVEL=-'
  MYSQL_NAME: '-=MYSQL_NAME=-'
  MYSQL_URL: '-=MYSQL_URL=-'
  MYSQL_USER: '-=MYSQL_USER=-'
  MYSQL_PASSWORD: '-=MYSQL_PASSWORD=-'
  BACKENDS_FILE_LOCATION: '-=BACKENDS_FILE_LOCATION=-'
  SWAGGER_INDEX_LOCATION: '-=SWAGGER_INDEX_LOCATION=-'
  NGINX_CONFIG_FILE_LOCATION: '-=NGINX_CONFIG_FILE_LOCATION=-'
  DJANGO_APP_TYPE: '-=DJANGO_APP_TYPE=-'
  CONSUMER_APP_TYPE: '-=CONSUMER_APP_TYPE=-'
  RABBITMQ_EXCHANGE_TYPE: '-=RABBITMQ_EXCHANGE_TYPE=-'
  RABBITMQ_EXCHANGE: '-=RABBITMQ_EXCHANGE=-'
  RABBITMQ_HOST: '-=RABBITMQ_HOST=-'
  RABBITMQ_PORT: '-=RABBITMQ_PORT=-'
  APP_PORT: '-=APP_PORT=-'
  APP_NAME: '-=APP_NAME=-'
  DJANGO_LOG_LEVEL: '-=DJANGO_LOG_LEVEL=-'
  NOTIFICATIONSERVICE_EXCHANGE: '-=NOTIFICATIONSERVICE_EXCHANGE=-'
  GOOGLE_OAUTH_KEY: '-=GOOGLE_OAUTH_KEY=-'
  GOOGLE_OAUTH_SECRET: '-=GOOGLE_OAUTH_SECRET=-'

--- #service
apiVersion: v1
kind: Service
metadata:
  name: -=APP_NAME=-
  namespace: -=ENV_NAMESPACE=-
spec:
    type: ClusterIP
    ports:
    - name: http
      port: -=APP_PORT=-
    - name: httpp
      port: 80
    selector:
        app: -=APP_NAME=-

--- #ACMEIssuer
acme:
    email: -=ADMIN_EMAIL=-
    preferredChain: ""
    privateKeySecretRef:
      name: idevopsio--=ENV_NAMESPACE=-
    server: https://acme-v02.api.letsencrypt.org/directory
    solvers:
    - dns01:
        route53:
          accessKeyID: -=AWSB64AK=-
          hostedZoneID: Z370FY5A2PDAE
          region: us-east-1
          secretAccessKeySecretRef:
            key: -=AWSB64SK=-
            name: issuer-aws-secret
      selector:
        dnsZones:
        - -=DNS_ZONES=-
--- #Ingress
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: idevopsio
  namespace: -=ENV_NAMESPACE=-
  annotations:
    cert-manager.io/issuer: idevopsio--=ENV_NAMESPACE=-
    kubernetes.io/ingress.class: nginx
spec:
  tls:
  - hosts:
    - -=DNS_ZONES=-
    secretName: idevops
  rules:
  - host: -=DNS_ZONES=-
    http:
      paths:
      - path: /
        backend:
          serviceName: idevopsio--=ENV_NAMESPACE=-
          servicePort: 80
'''--- #nginx-ingress
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: G
    meta.helm.sh/release-namespace: -=ENV_NAMESPACE=-
  creationTimestamp: null
  finalizers:
  - service.kubernetes.io/load-balancer-cleanup
  labels:
    app.kubernetes.io/instance: G
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress
    helm.sh/chart: nginx-ingress-0.7.1
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:meta.helm.sh/release-name: {}
          f:meta.helm.sh/release-namespace: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/instance: {}
          f:app.kubernetes.io/managed-by: {}
          f:app.kubernetes.io/name: {}
          f:helm.sh/chart: {}
      f:spec:
        f:externalTrafficPolicy: {}
        f:ports:
          .: {}
          k:{"port":80,"protocol":"TCP"}:
            .: {}
            f:name: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
          k:{"port":443,"protocol":"TCP"}:
            .: {}
            f:name: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
        f:selector:
          .: {}
          f:app: {}
        f:sessionAffinity: {}
        f:type: {}
    manager: Go-http-client
    operation: Update
    time: "2020-12-23T05:43:59Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:finalizers:
          .: {}
          v:"service.kubernetes.io/load-balancer-cleanup": {}
      f:status:
        f:loadBalancer:
          f:ingress: {}
    manager: kube-controller-manager
    operation: Update
    time: "2020-12-24T02:30:42Z"
  name: nginx-ingress
  selfLink: /api/v1/namespaces/-=ENV_NAMESPACE=-/services/nginx-ingress
spec:
  externalTrafficPolicy: Local
  healthCheckNodePort: 32621
  ports:
  - name: http
    nodePort: 31585
    port: 80
    protocol: TCP
    targetPort: 80
  - name: https
    nodePort: 30761
    port: 443
    protocol: TCP
    targetPort: 443
  selector:
    app: nginx-ingress
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer: {}
''''